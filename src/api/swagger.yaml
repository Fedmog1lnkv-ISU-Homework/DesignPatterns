openapi: "3.0.0"
info:
  description: Набор методов для учёта предприятия
  version: 1.0.0
  title: RestApi
servers:
  - url: /api
    description: Base URL for the API
paths:
  /api/osv:
    get:
      summary: Получить OSV отчёт
      operationId: src.api.routes.osv.get
      parameters:
        - name: start_date
          in: query
          description: начало периода
          required: true
          schema:
            type: string
        - name: end_date
          in: query
          description: конец периода
          required: true
          schema:
            type: string
        - name: storehouse_id
          in: query
          description: id склада
          required: false
          schema:
            type: string
      responses:
        200:
          description: Номенальная единица успешно добавлена
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
  /api/nomenclature:
    put:
      summary: Добавить номенальную единицу
      operationId: src.api.routes.nomenclature.create_nomenclature
      requestBody:
        description: DTO модель для создания номенальной единицы
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNomenclatureDTO'
      responses:
        200:
          description: Номенальная единица успешно добавлена
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
  /api/nomenclature/{id}:
    patch:
      summary: Обновить номенальную единицу
      operationId: src.api.routes.nomenclature.update_nomenclature
      parameters:
        - name: id
          in: path
          description: ID номенальной единицы
          required: true
          schema:
            type: string
      requestBody:
        description: DTO модель для создания номенальной единицы
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNomenclatureDTO'
      responses:
        200:
          description: Номенальная единица успешно добавлена
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
    delete:
      summary: Удалить номенальную единицу
      operationId: src.api.routes.nomenclature.delete_nomenclature
      parameters:
        - name: id
          in: path
          description: ID номенальной единицы
          required: true
          schema:
            type: string
      responses:
        200:
          description: Фильтр успешно добавлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
    get:
      summary: Получить номенальную единицу
      operationId: src.api.routes.nomenclature.get_nomenclature
      parameters:
        - name: id
          in: path
          description: ID номенальной единицы
          required: true
          schema:
            type: string
      responses:
        200:
          description: Фильтр успешно добавлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
  /api/settings/dump:
    post:
      summary: Сохранить данные
      operationId: src.api.routes.settings.dump
      responses:
        200:
          description: Данные сохранены
          content:
            application/json:
              schema:
                type: object
                properties:
                  settings:
                    type: object
  /api/settings:
    get:
      summary: Получить настройки
      operationId: src.api.routes.settings.get_settings
      responses:
        200:
          description: Настройки успешно получены
          content:
            application/json:
              schema:
                type: object
                properties:
                  settings:
                    type: object

  /api/settings/date_block:
    post:
      summary: Обновить дату блокировки
      operationId: src.api.routes.settings.update_date_block
      requestBody:
        description: DTO модель для обновления даты блокировки
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DateBlockDTO'
      responses:
        200:
          description: Дата блокировки успешно обновлена
          content:
            application/json:
              schema:
                type: object
                properties:
                  settings:
                    type: object

  /api/store/turnover:
    post:
      summary: Добавить фильтр для отчета по домену
      operationId: src.api.routes.store.get_turnovers
      requestBody:
        description: DTO модель для фильтрации
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreTurnoverDTO'
      responses:
        200:
          description: Фильтр успешно добавлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
  /api/prototype/{entity}:
    post:
      summary: Добавить фильтр для отчета по домену
      operationId: src.api.routes.prototype.get_by_entity
      parameters:
        - name: entity
          in: path
          description: Тип юнита для прототипа
          required: true
          schema:
            type: string
            enum:
              - recipes
              - nomenclatures
              - nomenclature_groups
              - measurement_units
              - store_transaction
              - storehouse
      requestBody:
        description: DTO модель для фильтрации
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Filters'
      responses:
        200:
          description: Фильтр успешно добавлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
  /reports/formats:
    get:
      summary: Get available report formats
      operationId: src.api.routes.reports.get_report_formats
      description: Retrieve a list of all available report formats.
      responses:
        '200':
          description: A list of report formats
          content:
            application/json:
              schema:
                type: object
                properties:
                  formats:
                    type: array
                    items:
                      type: string
                      
  /reports/report/{entity}:
    get:
      summary: Generate report for a specific entity
      operationId: src.api.routes.reports.get_report
      description: Retrieve a report for the specified entity in a given format.
      parameters:
        - name: entity
          in: path
          required: true
          description: The entity name for which the report should be generated.
          schema:
            type: string
        - name: format
          in: query
          required: true
          description: The format of the report to be generated.
          schema:
            type: string
            enum:
              - CSV
              - MARKDOWN
              - JSON
              - XML
              - RTF
      responses:
        '200':
          description: Report successfully generated
          content:
            application/json:
              schema:
                type: object
                description: The generated report content.
        '400':
          description: Bad Request - Invalid format or missing format parameter
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: Entity not found
          content:
            text/plain:
              schema:
                type: string
components:
  schemas:
    UpdateNomenclatureDTO:
      type: object
      properties:
        name:
          type: string
        nomenclature_group_id:
          type: string
        unit_id:
          type: string
    CreateNomenclatureDTO:
      type: object
      properties:
        name:
          type: string
        nomenclature_group_id:
          type: string
        unit_id:
          type: string
    DateBlockDTO:
      type: object
      properties:
        value:
          type: integer
    StoreTurnoverDTO:
      type: object
      properties:
        filters:
          type: array
          items:
            $ref: '#/components/schemas/FilterItem'
        start_time:
          type: integer
        end_time:
          type: integer
    FilterItem:
      type: object
      properties:
        key:
          type: string
        value:
          oneOf:
            - type: string
            - type: number
            - type: boolean
            - type: array
        operation:
          type: string
          enum:
            - EQUAL
            - LIKE
            - BETWEEN
    Filters:
      type: array
      items:
        $ref: '#/components/schemas/FilterItem'
